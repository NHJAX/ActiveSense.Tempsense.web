
@{
    ViewBag.Title = "Index";
}

<div class="jumbotron">
    <center>
        <img class="img-responsive" src="~/Content/images/Tempsense-logo.png" alt="Alternate Text" />
    </center>
    <div id="temperature">
    </div>
        <div class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document" style="position: initial;">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">Device Report</h4>
                    </div>
                    <div class="modal-body">
                        <canvas id="graphicalMeasures" width="600" height="400"></canvas>
                        <div id="ContainerPreloadGraphic">
                            <center> <img src="~/Content/images/8.gif" /> </center>
                        </div>
                        <center id="ContentMessageGraphics"></center>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
</div>
<div class="col-lg-push-2 col-md-push-2 col-sm-10 col-xs-12">
    <div class="row">
        <div class="col-md-4">
            <div class="media media-middle">
                <div class="media-left">
                    <div style="background-color: #007D21;width: 34px;height: 34px;">  </div>

                </div>
                <div class="media-body">
                    <h4 class="media-heading">Green</h4>
                    <p>Stable..</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="media media-middle">
                <div class="media-left">
                    <div style="background-color: #dcd221; width: 34px;height: 34px;">  </div>

                </div>
                <div class="media-body">
                    <h4 class="media-heading">Yellow</h4>
                    <p>Tolerance..</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="media media-middle">
                <div class="media-left">
                    <div style="background-color: #E81F00;width: 34px;height: 34px;">  </div>

                </div>
                <div class="media-body">
                    <h4 class="media-heading">Red</h4>
                    <p>Alert..</p>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="container price-item">

    <div class="col-sm-12">
        <div id="content">
        </div>
    </div>

</div>

<div><input type="hidden" value="@ViewBag.UsK" id="usery" /></div>
<br>
<br>
<div id="ContainerPreload">
    <i class="fa fa-cog fa-spin fa-5x fa-fw"></i>
    <span class="sr-only">Loading...</span>
</div>
<br>

<script>

        $().ready(function () {
            $(function () {

                $("#ContainerPreload").show();
                $("#content").hide();
                //Create the Hub
                var temperatureHub = $.connection.temperatureHub;

                //Call InitChartData
                $.connection.hub.start().done(function () {
                    temperatureHub.server.initTempData($('#usery').val());
                });

                temperatureHub.client.updateTemperature = function (tempUpdate) {
                    UpdateTemperature(tempUpdate);
                };
            });
        });
</script>
<script type="text/javascript">

        var messagesWarningTotal = '';
        var MSG_without_threshold = "The sensor does not have a defined threshold.";
        var WIDTH_CHANGE_TOASTR = "600";
        var Message_without_MeasureS = 'Not found Measures of the past 24 hours.';
        var TITLE_POPPUP = "Device report # Last 24 hours.";
        //Need to pass in timezone offset to get dates corrected for local display
        //Dates in the database are stored in UTC format
        var offset = new Date().getTimezoneOffset();
        //offset = offset * -1;
        var ctx = document.getElementById("graphicalMeasures").getContext("2d");
        var myChart = new Chart(ctx, { type: 'line' });

        //function which is helper callback
        function UpdateTemperature(data) {

            messagesWarningTotal  = '';
            $('#content').html('');
            $.each(data, function (index, value) {
                $.each(value, function (indextemp, valuetemp) {
                    $('#content').append(BuildContainerDevice(valuetemp.DeviceID, valuetemp.Company, valuetemp.NameDevice, valuetemp.Temperature, valuetemp.Min, valuetemp.Max, valuetemp.MinTolerance, valuetemp.MaxTolerance, valuetemp.TypeMeasure));
                    $('.verGraphics' + (valuetemp.DeviceID) + '').click(function () {
                        GetMeasuresByDevice($(this).data('id'), $(this).data('name'), valuetemp.TypeMeasure);
                   });
                })
            });

            if (messagesWarningTotal  != '') {
                toastr['error'](messagesWarningTotal );
            }

            if (data != null) {
                $("#content").show();
            } else {
                Command: toastr["error"]("Data not found please try again", 'ERROR');
            }
            $("#ContainerPreload").hide();
        }

    //function that is in charge of creating the object Visual of devices
        function BuildContainerDevice(idDevice, company, device, temperature, tempMin, tempMax, tolMin, tolMax, TypeMeasure) {

            var ContainerColumna = null;
            var content = null;
            var contentRow = null;
            var contentBody = null;
            var StyleWarnigThreshold = '';
            var btnThreshold = '';
            var MessageAlert = null;
            var stylehead = "background: #007D21;";
            var stylebody = "background: #007D21;";
            var newbtnumb = null;
            var currentdate = new Date();
            var curr_hour = currentdate.getHours();
            var curr_min = ('0' + currentdate.getMinutes()).slice(-2);
            var curr_sec = ('0' + currentdate.getSeconds()).slice(-2);
            var datetime = "Sync - " + curr_hour + ":" + curr_min + ":" + curr_sec;

            var TypeM = null;
            if (tempMin == 0 && tempMax == 0) {
                btnThreshold = '<a id="btnThreshold" style="background-color: #860a0a;" class="btn btn-danger" data-toggle="tooltip" data-placement="rigth" title="' + MSG_without_threshold + '" onMouseOver="message()" onClick="message()"><i class="lnr lnr-warning"></i></a>';
            } else {

                if (temperature >= tolMax || temperature <= tolMin) {
                    MessageAlert = (temperature <= tolMin) ? ": has very low " + TypeMeasure + " " : ": has very high " + TypeMeasure + " ";
                    ShowPopup("error", device, MessageAlert);
                    StyleWarnigThreshold = 'alert';
                    stylehead = "background: #E81F00";
                    stylebody = "background: #E81F00";
                } else {
                    if (temperature >= tempMax || temperature <= tempMin) {
                        MessageAlert = (temperature <= tempMin) ? ": is below set threshold" : ": is above set threshold ";
                        ShowPopup("warning", device, MessageAlert);
                        stylehead = "background: #dcd221;";
                        stylebody = "background: #dcd221;";
                    }
                }
            }
            if (TypeMeasure == "Temperature" || TypeMeasure == "Ambient temp") {
                TypeM = "°F";
            } else if (TypeMeasure == "Humidity") {
                TypeM = "%H";
            } else if (TypeMeasure == "Wait Time") {
                TypeM = "Min";
            }

            contentBody = $('<div class="col-lg-4 col-md-6 col-sm-9 col-xs-12"><div class="panel panel-warning hover-3" style="border: none;"><div class="panel-heading" style="background-color: #373f4c; border-color: #ffffff;"><div class="price-value" style="' + stylehead + '"><p><span>' + temperature + '</span></p></div><div class="price-period" style=""><p id="Letter">' + TypeM + '</p></div></div><div class="panel-body" style="' + stylebody + '"><h3>' + device + '</h3><ul class="list-unstyled"><li><p align=center style="color: #ffffff">' + TypeMeasure + '</p></li></ul> <ul class="list-unstyled"><li><p align=center style="color: #ffffff">' + datetime + ' </p></li></ul></div><div class="panel-footer" style="background-color: #373f4c; border-color: #ffffff;"><a id="btnGraphics2" class="btn btn-primary verGraphics2" data-id="' + idDevice + '" data-Name="' + device + '" href="#"><i class="lnr lnr-chart-bars"></i></a> <a id="btnGraphics" class="btn btn-primary verGraphics' + idDevice + '" data-id="' + idDevice + '" data-Name="' + device + '" href="#"><i class="lnr lnr-chart-bars"></i>24Hr Chart</a> ' + btnThreshold + '</div></div></div>');
            //contentBody = $('<div class="col-md-3 col-sm-6 col-xs-12"><div class="panel panel-warning hover-3" style="border: none;"><div class="panel-heading" style="background-color: #373f4c; border-color: #ffffff;"><div class="price-value" style="' + stylehead + '"><p><span>' + temperature + '</span></p></div><div class="price-period" style=""><p id="Letter">' + TypeM + '</p></div></div><div class="panel-body" style="' + stylebody + '"><h3>' + device + '</h3><ul class="list-unstyled"><li><p align=center style="color: #ffffff">' + TypeMeasure + '</p></li></ul> <ul class="list-unstyled"><li><p align=center style="color: #ffffff">' + datetime + ' </p></li></ul></div><div class="panel-footer" style="background-color: #373f4c; border-color: #ffffff;"><a id="btnGraphics2" class="btn btn-primary verGraphics" data-id="' + idDevice + '" data-Name="' + device + '" href="#"><i class="lnr lnr-chart-bars"></i></a> <a id="btnGraphics" class="btn btn-primary verGraphics" data-id="' + idDevice + '" data-Name="' + device + '" href="#"><i class="lnr lnr-chart-bars"></i>24Hr Chart</a> ' + btnThreshold + '</div></div></div>');
            var ContainerSeparador = $('<div class="clearfix" />');
            contentBody.append();
            return contentBody;
        }

    //function that displays messages
        function ShowPopup(TypeMessage, idDevice, ShowMessage) {
            //toastr[TypeMessage](idDevice + ShowMessage);
            var position = "toast-top-right";
            if ($(window).width() < WIDTH_CHANGE_TOASTR) {
                position = "toast-bottom-full-width";
            }
            toastr.options = {
                "closeButton": true,
                "showDuration": "2000",
                "hideDuration": "2000",
                "timeOut": "2000",
                "extendedTimeOut": "2000",
                "preventDuplicates": true,
                "positionClass": position
            }
            messagesWarningTotal  += idDevice + ShowMessage + "<br/>";
        }

    // feature that allows render graph per hour
        function RenderGraphicsByDevice(HoursList, temperaturesList, UpperThreshold ,
                                            LowerThreshold, LowerToleranceList, UpperToleranceList, TypeMeasure) {


            // show canvas of graph
            $("#graphicalMeasures").show();

            //get object graph
            var canvas = document.getElementById("graphicalMeasures");
            var ctx = canvas.getContext("2d");

            //rendering of lines of Threshold
            var horizonalLinePlugin = {
                afterDraw: function (chartInstance) {
                    var yScale = chartInstance.scales["y-axis-0"];
                    var canvas = chartInstance.chart;
                    var ctx = canvas.ctx;
                    var index;
                    var line;
                    var style;

                    if (chartInstance.options.horizontalLine) {
                        for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                            line = chartInstance.options.horizontalLine[index];

                            if (!line.style) {
                                style = "rgba(169,169,169, .6)";
                            } else {
                                style = line.style;
                            }

                            if (line.y) {
                                yValue = yScale.getPixelForValue(line.y);
                            } else {
                                yValue = 0;
                            }

                            ctx.lineWidth = 3;

                            if (yValue) {
                                ctx.beginPath();
                                ctx.moveTo(0, yValue);
                                ctx.lineTo(canvas.width, yValue);
                                ctx.strokeStyle = style;
                                ctx.stroke();
                            }

                            if (line.text) {
                                ctx.fillStyle = style;
                                ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                            }
                        }
                        return;
                    };
                }
            };

            Chart.pluginService.register(horizonalLinePlugin);
            //data by default showing graphics
            var data = {
                labels: HoursList,
                datasets: [
                            {
                                label: TypeMeasure,
                                borderColor: "rgba(75,192,192,1)",
                                data: temperaturesList,
                                spanGaps: true,
                            },
                            {
                                label: "Tolerance Max",
                                lineTension: 0.1,
                                borderColor: "#ff0000",
                                borderDashOffset: 0.0,
                                pointBorderWidth: 0,
                                pointHoverRadius: 0,
                                pointHoverBorderWidth: 0,
                                pointRadius: 0,
                                pointHitRadius: 0,
                                backgroundColor: "rgba(0,0,0,0)",
                                data: UpperToleranceList,
                            },
                            {

                                label: "Tolerance Min",
                                fill: false,
                                lineTension: 0.1,
                                borderColor: "#ff0000",
                                borderDashOffset: 0.0,
                                pointBorderWidth: 0,
                                pointHoverRadius: 0,
                                pointHoverBorderWidth: 0,
                                pointRadius: 0,
                                pointHitRadius: 0,
                                backgroundColor: "rgba(0,0,0,0)",
                                data: LowerToleranceList,
                            },
                             {
                                 label: TypeMeasure + " Max",
                                 lineTension: 0.1,
                                 borderColor: "#000000",
                                 borderDashOffset: 0.0,
                                 pointBorderWidth: 0,
                                 pointHoverRadius: 0,
                                 pointHoverBorderWidth: 0,
                                 pointRadius: 0,
                                 pointHitRadius: 0,
                                 backgroundColor: "rgba(0,0,0,0)",
                                 data: UpperThreshold,
                             },
                            {
                                label: TypeMeasure + " Min",
                                lineTension: 0.1,
                                borderColor: "#000000",
                                borderDashOffset: 0.0,
                                pointBorderWidth: 0,
                                pointHoverRadius: 0,
                                pointHoverBorderWidth: 0,
                                pointRadius: 0,
                                pointHitRadius: 0,
                                backgroundColor: "rgba(0,0,0,0)",
                                data: LowerThreshold,
                            }
                ]
            };
            //limits to render outstanding
            var tolMaximum = UpperToleranceList[0] !== undefined ? UpperToleranceList[0] : 0;
            var tolMinimum = LowerToleranceList[0] !== undefined ? LowerToleranceList[0] : 0;
            //configuration labels
            if (myChart) {
                myChart.destroy();
            }
            myChart = new Chart(ctx, {
                type: 'line',
                data: data,
                options: {
                    "horizontalLine":
                        [
                            {
                                "y": tolMaximum,
                                "style": "#ff0000",
                                "text": "Tol Max : " + tolMaximum
                            },
                            {
                                "y": tolMinimum,
                                "style": "#ff0000",
                                "text": "Tol Min : " + tolMinimum
                            },
                        ],
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Hours'
                            }
                        }],
                        yAxes: [{
                            scaleLabel: {
                                display: true,
                                labelString: TypeMeasure
                            }
                        }]
                    }
                }
            });

        }

    // function to obtain data
        function GetMeasuresByDevice(idDevice, NameDevice, TypeMeasure) {

            //show preload, popup, change title of the popup
            $("#ContainerPreloadGraphic").show();
            $('.modal').modal('show');
            $('.modal-dialog').css('width', '60%');
            var popup_height = document.getElementById('ContainerPreloadGraphic').offsetHeight;
            var popup_width = document.getElementById('ContainerPreloadGraphic').offsetWidth;
            $('.modal-dialog').css('top', (($(window).height() - popup_height) / 6));
            $('.modal-dialog').css('left', (($(window).width() - popup_width) / 6));
            $('.modal-title').html(TITLE_POPPUP.replace("#", NameDevice));
            //hide graphics, hide error message
            $("#graphicalMeasures").hide();
            $('#ContentMessageGraphics').html('');

            $.ajax({
                url: '@Url.Action("GetPastMeasures", "Dashboard" )',
                type: 'POST',
                data: JSON.stringify({ idDevice: idDevice, offset: offset }),
                datatype: 'application/json',
                contentType: 'application/json',
                cache: false,
                success: function (msg) {
                    $("#ContainerPreloadGraphic").hide();

                    if (msg.HoursList.length > 0) {
                        RenderGraphicsByDevice(msg.HoursList, msg.temperatureList,
                                                      msg.ThresholduperiorList, msg.ThresholdInferiorList,
                                                      msg.LowerToleranceList, msg.UpperToleranceList, TypeMeasure);
                    } else {
                        $('#ContentMessageGraphics').html(Message_without_MeasureS);
                    }

                },
                error: function (xhr, error) {
                    $("#ContainerPreloadGraphic").hide();
                    $('#modal').modal('hide');
                    Command: toastr["error"]('An error occurred while obtaining data from device', 'ERROR');
                },
            });

        }
</script>

@section scripts{
     <script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
    <script src="~/SignalR/hubs"></script>
    <script>
        function message() {
            $('[data-toggle="tooltip"]').tooltip();
        }
    </script>
    <script src="~/Scripts/Chart.bundle.min.js" type="text/javascript"></script>
}

