@model IEnumerable<ActiveSense.Tempsense.model.Model.Measure>
@{
    ViewBag.Title = "Reports";
}
<div style="padding: 0%; background-color: #babdc7;" class="panel panel">
    <div class="panel-heading"><h2>Report</h2></div>
    <div class="panel-body">
        <div id="listMeasures" class="form-inline">
            <div class="row">
                <div class="col-xs-4 col-md-4">
                    <div class="form-group">

                        <div id="dateStart" class="input-append">
                            <label for="dateStart"> Start Date </label>
                            <input class="form-control" data-format="yyyy-MM-dd" type="text" id="dateStartData" />
                            <span class="add-on">
                                <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                    <img src="~/Content/images/img_calendar.png" />
                                </i>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-xs-4 col-md-4">
                    <div class="form-group">

                        <div id="dateEnd" class="input-append">
                            <label for="dateEnd"> End Date </label>
                            <input data-format="yyyy-MM-dd" type="text" class="form-control" id="dateEndData" />
                            <span class="add-on">
                                <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                    <img src="~/Content/images/img_calendar.png" />
                                </i>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-xs-3 col-md-3">
                    <div class="form-group">
                        <div>
                            <button type="button" id="btnPrint" class="btn btn-primary">Print</button>
                        </div>
                    </div>
                </div>
            </div>
            <br/>
            <div class="row">                
                <div class="col-xs-4 col-md-4">
                    <label for="DeviceID"> Department</label>
                    <div class="form-group">
                        @Html.DropDownList("Companies", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="col-xs-4 col-md-4" id="contentSelectDisp">
                    <label for="DeviceID"> Sensor</label>
                    <div class="form-group">
                        @Html.DropDownList("DeviceID", null, htmlAttributes: new { @class = "form-control" })
                        <img id="prelaodInner" src="~/Content/images/preloadInner.gif" />
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="col-xs-3 col-md-3">
                    <label for="FilterTime"> Filter</label>
                    <div class="form-group">
                        @Html.DropDownList("FilterTime", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
    </div>
</div>



<br />

<div id="ContainerPreload">
    <img src="~/Content/images/8.gif" />
</div>

<div id="printThis" >
    <h3 id="title_graphic"></h3>
    <canvas id="graphicalMeasures" width="200" height="100"></canvas>
</div>
<br />
<div id="printThis2">
    <div id="Paginatedtable" class="table-responsive">
        <table id="TableMeasures" class="display" cellspacing="0" width="100%">
            <thead>
                <tr>
                    <th>Value</th>
                    <th>Device</th>
                    <th>Datetime</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
@section scripts{

    <script type="text/javascript">

        var objTablePaged  = '';
        var MESSAGE_ERROR_date_MORE  = ' Start Date must be less that the end date';
        var MESSAGE_ERROR_date_EMPTY = 'You must enter the two dates';
        var MESSAGE_ERROR_CONNECTION = "Has been an error in the system please try again";
        var MESSAGE_ERROR_DEVICE = " Please select a device";
        var FILTER_DAYS = 1440;
        var MESSAGE_ERROR_DATE_FILTER = 'You must enter the two dates for this filter ';
        //Need to pass in timezone offset to get dates corrected for local display
        //Dates in the database are stored in UTC format
        var offset = new Date().getTimezoneOffset();
        offset = offset * -1;

        $(document).ready(function () {

            $('#TableMeasures').hide();
            $("#ContainerPreload").hide();

            $('#dateStart').datetimepicker({
                pickTime: false,
                autoclose: true
            });

            $('#dateEnd').datetimepicker({
                pickTime: false,
                autoclose: true
            });

            // feature that allows you to clean the calendars if an error has occurred
            function CleanCalendar() {
                $("#dateStartData").val('');
                $("#dateEndData").val('');
            }

            // device change event
            $("#DeviceID").change(function () {
                ToFindInformation();
            });

            //filter change event time
            $('#FilterTime').change(function () {
                var Valuefilter = $(this).val();
                if (Valuefilter != 0 && Valuefilter != "") {
                    ToFindInformation();
                }
            });

              //Enterprise change event
            $('#Companies').change(function () {
                var idCompany = $(this).val();
                if (idCompany != 0 && idCompany != "") {

                    $("#DeviceID").html("");
                    $("#DeviceID").hide();
                    $('#prelaodInner').show();
                    $.ajax({
                        url: '@Url.Action("GetAssociatedDevice", "Report" )',
                        type: 'POST',
                        data: JSON.stringify({ idCompany: idCompany }),
                        datatype: 'application/json',
                        contentType: 'application/json',
                        cache: false,
                        success: function (result) {
                            $.each($.parseJSON(result), function (i, device) {
                                $("#DeviceID").append($('<option></option>').val(device.idDevice).html(device.NameDevice))
                            })
                            $('#prelaodInner').hide();
                            $("#DeviceID").show();
                            ToFindInformation();

                        },
                        error: function (xhr, error) {
                            $('#prelaodInner').hide();
                            $("#DeviceID").show();
                            Command: toastr["error"](MESSAGE_ERROR_CONNECTION, 'ERROR');
                        },
                    });
                }
            });

            //function that allows to search when changing or select the device
            function ToFindInformation() {
                var idDevice = $("#DeviceID").val();
                var dateStart = $("#dateStartData").val();
                var dateEnd = $("#dateEndData").val();

                if (ValidateRequest(dateStart, dateEnd)) {
                    $('#TableMeasures').show();
                    RenderTable(idDevice, dateStart, dateEnd);
                    SolicitorDataStatistics();
                }
            }

            // function of general enabling validate request purpose
            function ValidateRequest(dateStart, dateEnd) {
                var validationD = validateDevice();;
                var validationF = validateDates(dateStart, dateEnd);
                var validationFtr = ValidateFilterDays(dateStart, dateEnd);
                return (validationD && validationF && validationFtr) ? true : false;
            }

            // feature that allows you to validate that the days have been selected for
            // to filter by days
            function ValidateFilterDays(dateStart, dateEnd) {
                var IsValid = true;
                var filter = $("#FilterTime").val();
                if ( filter == FILTER_DAYS ) {
                    if (dateStart == "" || dateEnd == "") {
                        Command: toastr["error"](MESSAGE_ERROR_DATE_FILTER, 'ERROR');
                        IsValid = false;
                    }
                }
                return IsValid;
            }

            // device validation function
            function validateDevice() {
                var idDevice = $("#DeviceID").val();
                var validate = false;
                if (idDevice != 0 && idDevice != undefined) {
                    validate = true;
                } else {
                    Command: toastr["error"](MESSAGE_ERROR_DEVICE, 'ERROR');
                }
                return validate;
            }

            // feature that allows you to validate that you date it from home is greater that the date end
            function validateDates(dateStart, dateEnd) {
                if (dateStart > dateEnd) {
                    Command: toastr["error"](MESSAGE_ERROR_date_MORE , 'ERROR');
                    CleanCalendar();
                    return false;
                }

                if (dateStart == "" && dateEnd != "") {
                    Command: toastr["error"](MESSAGE_ERROR_date_EMPTY, 'ERROR');
                    CleanCalendar();
                    return false;
                }
                return true;
            }

            //function charge build the table of Measures receives as parameter
            // device ID, start date, date end
            // also allows you to Register events when the selector is pressed and is page
            function RenderTable(idDevice, dateStart, dateEnd) {

                //Show table container
                var objTableMeasuresVisual = $('#TableMeasures');
                objTableMeasuresVisual.show();
                //Get table
                var ObjContainerPaginatedTable = $('#Paginatedtable');
                //Generate table
                objTablePaged  = objTableMeasuresVisual.DataTable({
                    "processing": true,
                    "serverSide": true,
                    "searching": false,
                    "destroy": true,
                    "lengthMenu": [10, 15, 20, 30, 60],
                    "pageLength": 15,
                    language: {
                        processing: "Processing...",
                        search: "ToFind:",
                        lengthMenu: "Show _MENU_ records",
                        info: "Displaying records from the _START_ to _END_ of _TOTAL_ total records",
                        infoEmpty: "Showing records 0 to 0 of 0 total records",
                        infoFiltered: "a total of _MAX_ records (filtering)",
                        infoPostFix: "",
                        loadingRecords: "Loading...",
                        zeroRecords: "Are they found no results",
                        emptyTable: "No data available in this table",
                        paginate: {
                        first: "First",
                        previous: "Prev",
                        next: "Next",
                        last: "Last",
                        },
                     "aria": {
                            sortAscending: ": Select to sort the column ascending ",
                            sortDescending: ": Select to sort the column descending"
                        }
                    },
                    //Data service request
                    "ajax": {
                        "type": "POST",
                        "url": '@Url.Action("GetDataTable", "Report" )',
                          "data": function (d) {
                            d.idDevice = idDevice,
                            d.dateStart = $("#dateStartData").val(),
                            d.dateEnd = $("#dateEndData").val(),
                            d.FilterTime = $("#FilterTime").val(),
                            d.offset  = offset
                            },
                        // Show toastr error if there is error
                        "error": function () {
                            ObjContainerPaginatedTable.hide();
                            Command: toastr["error"](MESSAGE_ERROR_CONNECTION, 'ERROR');
                        }
                    },
                    "columns": [
                        { "data": "temperature", "orderable": false },
                        { "data": "NameDevice", "orderable": false },
                        { "data": "date", "orderable": false }
                    ]
                });

                var objdateStart = $("#dateStartData");
                var objdateEnd = $("#dateEndData");

                objTablePaged .on('length.dt', function (e, settings, len) {
                    var dateStart = objdateStart.val();
                    var dateEnd = objdateEnd.val();
                    if (ValidateRequest(dateStart, dateEnd)) {
                        SolicitorDataStatistics();
                    }
                });

                objTablePaged .on('page.dt', function () {
                    var dateStart = objdateStart.val();
                    var dateEnd = objdateEnd.val()


                    if (ValidateRequest(dateStart, dateEnd)) {
                        SolicitorDataStatistics();
                    }
                });

            }


            //
            //   feature that allows you to build the statistical table receives as parameters
            //    an array of dates and an array of temperatures.
            function RenderGraphicsStatistics(dates, temperatures, UpperThreshold , LowerThreshold , LowerToleranceList, UpperToleranceList) {
                var canvas = document.getElementById("graphicalMeasures");
                $('#graphicalMeasures').remove(); // this is my <canvas> element
                $('#printThis').append('<canvas id="graphicalMeasures"><canvas>');
                canvas = document.querySelector('#graphicalMeasures');
                var ctx = canvas.getContext("2d");


                var horizonalLinePlugin = {
                    afterDraw: function (chartInstance) {
                        var yScale = chartInstance.scales["y-axis-0"];
                        var canvas = chartInstance.chart;
                        var ctx = canvas.ctx;
                        var index;
                        var line;
                        var style;

                        if (chartInstance.options.horizontalLine) {
                            for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                                line = chartInstance.options.horizontalLine[index];

                                if (!line.style) {
                                    style = "rgba(169,169,169, .6)";
                                } else {
                                    style = line.style;
                                }

                                if (line.y) {
                                    yValue = yScale.getPixelForValue(line.y);
                                } else {
                                    yValue = 0;
                                }

                                ctx.lineWidth = 3;

                                if (yValue) {
                                    ctx.beginPath();
                                    ctx.moveTo(0, yValue);
                                    ctx.lineTo(canvas.width, yValue);
                                    ctx.strokeStyle = style;
                                    ctx.stroke();
                                }

                                if (line.text) {
                                    ctx.fillStyle = style;
                                    ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                                }
                            }
                            return;
                        };
                    }
                };
                Chart.pluginService.register(horizonalLinePlugin);

                var data = {
                    labels: dates,
                    datasets: [
                                {
                                    label: "Temp",
                                    borderColor: "rgba(75,192,192,1)",
                                    data: temperatures,
                                    spanGaps: true,
                                },
                                {
                                    label: "Tolerance Max",
                                    lineTension: 0.1,
                                    borderColor: "#ff0000",
                                    borderDashOffset: 0.0,
                                    pointBorderWidth: 0,
                                    pointHoverRadius: 0,
                                    pointHoverBorderWidth: 0,
                                    pointRadius: 0,
                                    pointHitRadius: 0,
                                    backgroundColor: "rgba(0,0,0,0)",
                                    data: UpperToleranceList,
                                },
                                {

                                    label: "Tolerance Min",
                                    fill: false,
                                    lineTension: 0.1,
                                    borderColor: "#ff0000",
                                    borderDashOffset: 0.0,
                                    pointBorderWidth: 0,
                                    pointHoverRadius: 0,
                                    pointHoverBorderWidth: 0,
                                    pointRadius: 0,
                                    pointHitRadius: 0,
                                    backgroundColor: "rgba(0,0,0,0)",
                                    data: LowerToleranceList,
                                },
                                 {
                                     label: "Temp Max",
                                     lineTension: 0.1,
                                     borderColor: "#000000",
                                     borderDashOffset: 0.0,
                                     pointBorderWidth: 0,
                                     pointHoverRadius: 0,
                                     pointHoverBorderWidth: 0,
                                     pointRadius: 0,
                                     pointHitRadius: 0,
                                     backgroundColor: "rgba(0,0,0,0)",
                                     data: UpperThreshold ,
                                 },
                                   {
                                       label: "Temp Min",
                                       lineTension: 0.1,
                                       borderColor: "#000000",
                                       borderDashOffset: 0.0,
                                       pointBorderWidth: 0,
                                       pointHoverRadius: 0,
                                       pointHoverBorderWidth: 0,
                                       pointRadius: 0,
                                       pointHitRadius: 0,
                                       backgroundColor: "rgba(0,0,0,0)",
                                       data: LowerThreshold ,
                                   }

                    ]
                };

                var tolMaximum = UpperToleranceList[0] !== undefined ? UpperToleranceList[0] : 0;
                var tolMinimum = LowerToleranceList[0] !== undefined ? LowerToleranceList[0] : 0;

                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: data,
                    options: {
                        "horizontalLine":
                            [
                                {
                                    "y": tolMaximum,
                                    "style": "#ff0000",
                                    "text": "Tol Max : " + tolMaximum
                                },
                                {
                                    "y": tolMinimum,
                                    "style": "#ff0000",
                                    "text": "Tol Min : " + tolMinimum
                                },
                            ],
                        scales: {
                            xAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Dates'
                                }
                            }],
                            yAxes: [{
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Value'
                                }
                            }]
                        },
                        responsive: true,
                    }
                });

            }
            //var canvas = document.getElementById('graphicalMeasures');
            //btnPrint.addEventListener('click', function () {
            //    document.body.removeChild(canvas);
            //    var img = new Image;
            //    img.id = 'tempPrintImage';
            //    img.onload = print;
            //    img.src = canvas.toDataURL();
            //    document.body.appendChild(img);
            //}, false);

            var imgData;
            var windowContent;
            var newcanvas;
            $printSection = document.getElementById("printSection");
            if (!$printSection) {
                var $printSection = document.createElement("div");
                $printSection.id = "printSection";
                document.body.appendChild($printSection);
            }
            var newcanvas = document.createElement("canvan2");

            document.getElementById("btnPrint").onclick = function () {
                // if we need to get the various browsers to print correctly look into
                //html2canvas


                imgData = document.getElementById('graphicalMeasures').toDataURL('image/pdf');
                windowContent = '<img src="' + imgData + '">';
                newcanvas.innerHTML = windowContent;

                $printSection.innerHTML = "";
                $printSection.appendChild(newcanvas);

                var elem = document.getElementById("printThis2")
                var domClone = elem.cloneNode(true);
                $printSection.appendChild(domClone);

                //printElementnew(document.getElementById("printThis"));
                //printElementnew(document.getElementById("printThis2"), true, "<hr />");
                window.print();
            }

   
            function printElement(elem, append, delimiter) {
                var domClone = elem.cloneNode(true);

                var $printSection = document.getElementById("printSection");


                if (!$printSection) {
                    var $printSection = document.createElement("div");
                    $printSection.id = "printSection";
                    document.body.appendChild($printSection);
                }

                if (append !== true) {
                    $printSection.innerHTML = "";
                }

                else if (append === true) {
                    if (typeof (delimiter) === "string") {
                        $printSection.innerHTML += delimiter;
                    }
                    else if (typeof (delimiter) === "object") {
                        $printSection.appendChlid(delimiter);
                    }
                }

                $printSection.appendChild(domClone);
            }

            // function that allows you to load data using ajax requests to show graph
            // then it calls function to render the graph statistics
            function SolicitorDataStatistics() {
                var info = objTablePaged .page.info();
                $("#graphicalMeasures").hide();
                var ObjTitleGraphic = $("#title_graphic");
                ObjTitleGraphic.text('');
                $("#ContainerPreload").show();

                $.ajax(
               {
                   url: '@Url.Action("GetDataChart", "Report")',
                   data: {
                       pageIndex: 1,
                       start: info.start,
                       length: info.length,
                       idDevice: $("#DeviceID").val(),
                       dateStart: $("#dateStartData").val(),
                       dateEnd: $("#dateEndData").val(),
                       FilterTime: $("#FilterTime").val(),
                       offset: offset
                   },
                   type: "POST",
                   success: function (msg) {
                       $("#ContainerPreload").hide();

                       if (msg.dates.length > 0) {
                           $("#graphicalMeasures").show();
                           RenderGraphicsStatistics(msg.dates, msg.temperatures,
                                                   msg.ThresholdSuperior, msg.ThresholdInferior,
                                                   msg.LowerToleranceList, msg.UpperToleranceList);
                           ObjTitleGraphic.text("Chart for " + $("#DeviceID option:selected").text());
                       }


                   },
                   error: function (result) {
                       ObjTitleGraphic.html('');
                       $("#ContainerPreload").hide();
                   }
               });
            }
        });

        function showLocalTime(container, zoneString, formatString) {
            var thisobj = this
            this.container = document.getElementById(container)
            this.localtime = moment.tz(new Date(), zoneString)
            this.formatString = formatString
            this.container.innerHTML = this.localtime.format(this.formatString)
            setInterval(function () { thisobj.updateContainer() }, 1000) //update container every second
        }

        showLocalTime.prototype.updateContainer = function () {
            this.localtime.second(this.localtime.seconds() + 1)
            this.container.innerHTML = this.localtime.format(this.formatString)
        }

    </script>
    <script src="~/Scripts/Chart.bundle.min.js" type="text/javascript"></script>
 

}


